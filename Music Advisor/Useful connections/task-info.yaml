type: edu
custom_name: stage3
files:
- name: build.gradle
  visible: true
  text: |-
    apply plugin: 'java'
    apply plugin: 'application'

    group 'advisor'
    version '1.0-SNAPSHOT'

    repositories {
        mavenCentral()
    }

    dependencies {
        implementation 'com.google.code.gson:gson:+'
    }

    jar {
        manifest {
            attributes 'Main-Class' : 'advisor.Main'
        }
        from {
            configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
        }
    }
  learner_created: false
- name: src/advisor/Main.java
  visible: true
  text: |
    package advisor;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/MusicAdvisorTest.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.mocks.web.WebServerMock;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;
    import org.junit.AfterClass;

    @SuppressWarnings("unused")
    public class MusicAdvisorTest extends StageTest<String> {

        private static final String fictiveAuthCode = "123123";
        private static final String fictiveAccessToken = "456456";
        private static final String fictiveRefreshToken = "567567";

        private static final int accessServerPort = 45678;
        private static final String accessServerUrl = "http://127.0.0.1:" + accessServerPort;

        private static final String[] arguments = new String[]{
                "-access",
                accessServerUrl
        };

        private static final String tokenResponse = "{" +
                "\"access_token\":\"" + fictiveAccessToken + "\"," +
                "\"token_type\":\"Bearer\"," +
                "\"expires_in\":3600," +
                "\"refresh_token\":" + "\"" + fictiveRefreshToken + "\"," +
                "\"scope\":\"\"" +
                "}";

        private static final WebServerMock accessServer = new WebServerMock(accessServerPort)
                .setPage("/api/token", tokenResponse);

        private static final MockTokenServer tokenServer = new MockTokenServer(accessServer);

        @DynamicTest
        CheckResult testAuth() {

            TestedProgram userProgram = new TestedProgram();
            userProgram.start(arguments);
            userProgram.setReturnOutputAfterExecution(false);

            Server server = new Server(userProgram, fictiveAuthCode);
            server.start();
            tokenServer.start();

            userProgram.goBackground();
            userProgram.execute("auth");

            try {
                server.join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            if (Server.checkResult != null) {
                return Server.checkResult;
            }

            userProgram.stopBackground();

            String outputAfterAuth = userProgram.getOutput();
            if (!outputAfterAuth.contains(fictiveAccessToken)) {
                return CheckResult.wrong("Not found correct access token in the result. " +
                        "Make sure, that you use the server from the command line arguments to access the token.");
            }

            userProgram.execute("featured");

            String outputAfterFeatured = userProgram.getOutput();
            if (!outputAfterFeatured.contains("---FEATURED---")) {
                return CheckResult.wrong("When \"featured\" was inputted there should be \"---FEATURED---\" line");
            }

            userProgram.execute("exit");
            userProgram.stop();

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult testNewWithoutAuth() {

            TestedProgram userProgram = new TestedProgram();
            userProgram.start(arguments);
            userProgram.setReturnOutputAfterExecution(false);

            userProgram.execute("new");
            String outputAfterNew = userProgram.getOutput();

            if (!outputAfterNew.strip().startsWith("Please, provide access for application.")) {
                return CheckResult.wrong("When no access provided you should output " +
                        "\"Please, provide access for application.\"");
            }

            userProgram.execute("exit");
            userProgram.stop();

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult testFeaturedWithoutAuth() {

            TestedProgram userProgram = new TestedProgram();
            userProgram.start(arguments);
            userProgram.setReturnOutputAfterExecution(false);

            userProgram.execute("featured");
            String outputAfterNew = userProgram.getOutput();

            if (!outputAfterNew.strip().startsWith("Please, provide access for application.")) {
                return CheckResult.wrong("When no access provided you should output " +
                        "\"Please, provide access for application.\"");
            }

            userProgram.execute("exit");
            userProgram.stop();

            return CheckResult.correct();
        }

        @AfterClass
        public static void afterTest() {
            tokenServer.stopMock();
        }

    }
  learner_created: false
- name: src/advisor/presentation/MusicAdvisor.java
  visible: true
  text: |
    package advisor.presentation;

    import java.util.Locale;
    import java.util.Scanner;

    public class MusicAdvisor {
        private final Scanner scanner;
        private boolean accessGranted = false;
        private final String CLIENT_ID = "b68e796f69654238a1631d9a19c67898";
        private final String CLIENT_SECRET = "4868231c3e094fc5b83fe6738040c85a";
        private final String REDIRECT_URI = "http://localhost:8080";

        public MusicAdvisor() {
            scanner = new Scanner(System.in);
        }

        public void run() {
            while (true) {
                userPrompt();
            }
        }

        public void userPrompt() {
            String input = scanner.next();
            choices(input);

        }

        public void choices(String s) {
            switch (s.toLowerCase()) {
                case "featured":
                    featured();
                    break;
                case "new":
                    newSelected();
                    break;
                case "categories":
                    categories();
                    break;
                case "playlists":
                    String category = scanner.next();
                    playlist(category);
                    break;
                case "auth":
                    //String auth = scanner.next();
                    String auth = String.format("https://accounts.spotify.com/authorize?client_id=%s&redirect_uri=%s&response_type=code", CLIENT_ID, REDIRECT_URI);
                    auth(auth);
                    break;
                case "exit":
                    System.out.println("---GOODBYE!---");
                    System.exit(0);
                    break;
            }
        }

        public void featured() {
            if (!accessGranted){
                System.out.println("Please, provide access for application.");
                return;
            }
            System.out.println("---FEATURED---");
            System.out.println("Wake Up and Smell the Coffee");
        }
        public void newSelected() {
            if (!accessGranted){
                System.out.println("Please, provide access for application.");
                return;
            }
            System.out.println("---NEW RELEASES---");
            System.out.println("Mountains [Sia, Diplo, Labrinth]");
        }
        public void categories() {
            if (!accessGranted){
                System.out.println("Please, provide access for application.");
                return;
            }
            System.out.println("---CATEGORIES---");
            System.out.println("Mood");
            System.out.println("Pop");
        }
        public void playlist(String cat) {
            if (!accessGranted){
                System.out.println("Please, provide access for application.");
                return;
            }
            System.out.printf("---%s PLAYLISTS---\n", cat.toUpperCase(Locale.ROOT));
            System.out.println("Mood");
        }

        public void auth(String authUri){
            System.out.println(authUri);
            accessGranted = true;
            System.out.println("---SUCCESS---");
        }


    }
  learner_created: true
- name: test/Server.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.output.OutputHandler;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.net.URI;
    import java.net.http.HttpClient;
    import java.net.http.HttpRequest;
    import java.net.http.HttpResponse;
    import java.net.http.HttpTimeoutException;
    import java.time.Duration;

    public class Server extends Thread {

        TestedProgram userProgram;
        private final String fictiveAuthCode;
        public static CheckResult checkResult = null;
        String redirectUri = "";


        public Server(TestedProgram userProgram, String fictiveAuthCode) {
            this.userProgram = userProgram;
            this.fictiveAuthCode = fictiveAuthCode;
        }

        @Override
        public void run() {
            long searchTime = System.currentTimeMillis();

            while (!Thread.interrupted()) {

                if (System.currentTimeMillis() - searchTime > 1000 * 9) {
                    checkResult = CheckResult.wrong("Not found a link with redirect_uri after 9 seconds.");
                    return;
                }

                String out = OutputHandler.getDynamicOutput();
                if (out.contains("redirect_uri=")) {
                    redirectUri = out.split("redirect_uri=")[1];
                    if (redirectUri.contains("&")) {
                        redirectUri = redirectUri.split("&")[0];
                    }
                    if (redirectUri.contains("\n")) {
                        redirectUri = redirectUri.split("\\R")[0];
                    }
                    break;
                }

                try {
                    sleep(300);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }

            try {
                HttpClient client = HttpClient.newBuilder().build();
                HttpRequest emptyRequest = HttpRequest.newBuilder()
                        .uri(URI.create(redirectUri))
                        .timeout(Duration.ofMillis(500))
                        .GET()
                        .build();
                HttpRequest errorRequest = HttpRequest.newBuilder()
                        .uri(URI.create(redirectUri + "?error=access_denied"))
                        .timeout(Duration.ofMillis(500))
                        .GET()
                        .build();
                HttpRequest codeRequest = HttpRequest.newBuilder()
                        .uri(URI.create(redirectUri + "?code=" + fictiveAuthCode))
                        .timeout(Duration.ofMillis(500))
                        .GET()
                        .build();

                System.out.println("Tester: making requests to redirect uri: " + redirectUri);
                HttpResponse<String> badResponse = client.send(emptyRequest, HttpResponse.BodyHandlers.ofString());
                System.out.println("Tester: done request 1: " + badResponse.body());
                HttpResponse<String> badResponse2 = client.send(errorRequest, HttpResponse.BodyHandlers.ofString());
                System.out.println("Tester: done request 2: " + badResponse2.body());
                HttpResponse<String> goodResponse = client.send(codeRequest, HttpResponse.BodyHandlers.ofString());
                System.out.println("Tester: done request 3: " + goodResponse.body());

                if (!badResponse.body().contains("Authorization code not found. Try again.")
                        || !badResponse2.body().contains("Authorization code not found. Try again.")) {
                    checkResult = CheckResult.wrong("You should send to the browser: `Authorization code not found. Try again.` if there is no code.");
                    return;
                }

                if (!goodResponse.body().contains("Got the code. Return back to your program.")) {
                    checkResult = CheckResult.wrong("\"You should send `Got the code. Return back to your program.` \" +\n" +
                            "                        \"if the query contains the code.");
                }
            } catch (HttpTimeoutException e) {
                checkResult = CheckResult.wrong("Not received any response from the server, found in redirect_uri: "
                        + redirectUri);
            } catch (InterruptedException e) {
                checkResult = CheckResult.wrong("Request to " + redirectUri + " was interrupted. " +
                        "Make sure, that you give the right feedback in your browser.");
            } catch (Exception e) {
                System.out.println("Tester: Error: " + e.getMessage());
                e.printStackTrace();
            }

        }
    }
  learner_created: false
- name: test/MockTokenServer.java
  visible: false
  text: |
    import org.hyperskill.hstest.mocks.web.WebServerMock;

    public class MockTokenServer extends Thread {

        WebServerMock accessServer;

        public MockTokenServer (WebServerMock accessServer) {
            this.accessServer = accessServer;
        }

        @Override
        public void run() {
            accessServer.start();
            accessServer.run();
        }

        public void stopMock() {
            interrupt();
        }
    }
  learner_created: false
- name: src/advisor/Server.java
  visible: true
  learner_created: true
- name: src/advisor/Client.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5479#comment
status: Solved
feedback:
  message: Congratulations!
  time: Tue, 22 Feb 2022 14:36:12 UTC
record: 3
